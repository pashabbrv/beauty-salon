# bot.py
import os
import time
import json
import unicodedata
import requests
from dotenv import load_dotenv
from bot.router import handle_message
from .storage import init_db
from .utils.auth import OWNER_ID
from .router import handle_message
# from .greenapi import receive_messages, send_whatsapp_message

print(f"[INFO] router loaded from: {handle_message.__module__}, OWNER_ID={OWNER_ID}")

load_dotenv()
INSTANCE_ID = os.getenv("GREENAPI_INSTANCE_ID")
API_TOKEN   = os.getenv("GREENAPI_API_TOKEN")

BASE = f"https://api.green-api.com/waInstance{INSTANCE_ID}"

# ====== –ø—Ä–æ—Å—Ç–µ–π—à–∏–π —Ä–æ—É—Ç–µ—Ä (–µ—Å–ª–∏ —É —Ç–µ–±—è —Å–≤–æ–π router.py ‚Äî –ø–æ–¥–∫–ª—é—á–∏ –µ–≥–æ –∑–¥–µ—Å—å) ======
HELP_TEXT = (
    "üìã –ö–æ–º–∞–Ω–¥—ã:\n"
    "/help ‚Äî —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
    "/add_admin <–Ω–æ–º–µ—Ä>\n"
    "/remove_admin <–Ω–æ–º–µ—Ä>\n"
    "/export ‚Äî —ç–∫—Å–ø–æ—Ä—Ç –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π –±–∞–∑—ã"
)
def handle_message(user_id: str, text: str) -> str:
    # –æ—Ç–≤–µ—á–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞ –∫–æ–º–∞–Ω–¥—ã
    if not text.startswith("/"):
        return ""  # –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ = –Ω–µ –æ—Ç–≤–µ—á–∞–µ–º
    if text.startswith("/help"):
        return HELP_TEXT
    return "ü§ñ –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –ù–∞–ø–∏—à–∏ /help"

# ====== —É—Ç–∏–ª–∏—Ç—ã Green-API ======
def _receive_one():
    try:
        url = f"{BASE}/ReceiveNotification/{API_TOKEN}"
        r = requests.get(url, timeout=25)  # long-poll
        r.raise_for_status()
        data = r.json()  # –ª–∏–±–æ None
        if data:
            print("[DEBUG] RAW:", json.dumps(data, ensure_ascii=False))
        return data
    except Exception as e:
        print(f"[ERROR] ReceiveNotification: {e}")
        return None

def _delete_notification(receipt_id):
    if receipt_id is None:
        return
    try:
        url = f"{BASE}/DeleteNotification/{API_TOKEN}/{receipt_id}"
        r = requests.delete(url, timeout=10)
        r.raise_for_status()
        print(f"[DEBUG] DeleteNotification {receipt_id} OK")
    except requests.RequestException as e:
        print(f"[WARN] DeleteNotification {receipt_id} failed: {e}")

def _send_text(chat_id_or_phone: str, text: str):
    if not text:
        return  # –Ω–∏—á–µ–≥–æ –Ω–µ —Å–ª–∞—Ç—å
    try:
        url = f"{BASE}/sendMessage/{API_TOKEN}"
        payload = {"message": text}
        if chat_id_or_phone.endswith("@c.us"):
            payload["chatId"] = chat_id_or_phone
        else:
            payload["phone"] = chat_id_or_phone
        r = requests.post(url, json=payload, timeout=15)
        r.raise_for_status()
        print(f"[DEBUG] Sent ‚Üí {chat_id_or_phone}: {text}")
    except requests.RequestException as e:
        print(f"[ERROR] sendMessage: {e}")

# ====== –ø–∞—Ä—Å–∏–Ω–≥ ======
def _extract_text(message_data: dict) -> str | None:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ None.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç textMessage –∏ extendedTextMessage.
    """
    t = (message_data or {}).get("typeMessage")
    if t == "textMessage":
        raw = (message_data.get("textMessageData") or {}).get("textMessage")
    elif t == "extendedTextMessage":
        raw = (message_data.get("extendedTextMessageData") or {}).get("text")
    else:
        return None

    if raw is None:
        return None

    # –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —é–Ω–∏–∫–æ–¥–∞ (—Å–ª—ç—à –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ—Ö–æ–∂–∏–º —Å–∏–º–≤–æ–ª–æ–º)
    s = unicodedata.normalize("NFKC", str(raw)).strip()

    # –µ–¥–∏–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ help –±–µ–∑ —Å–ª—ç—à–∞
    lowered = s.lower()
    if lowered == "help":
        s = "/help"

    # –µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ —Å –ª–∏—à–Ω–∏–º–∏ –ø—Ä–æ–±–µ–ª–∞–º–∏ —Ç–∏–ø–∞ "/help   "
    if s.startswith("/"):
        s = "/" + s[1:].lstrip()

    return s

# ====== –¥–µ–¥—É–ø (–≤ –ø–∞–º—è—Ç–∏) ======
PROCESSED = set()
def _msg_key(body: dict) -> str:
    md = body.get("messageData") or {}
    # —Å—Ç–∞—Ä–∞–π—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å stanzaId; –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç, idMessage; –∏–Ω–∞—á–µ receiptId
    return md.get("stanzaId") or md.get("idMessage") or str(body.get("timestamp") or "")  # fallback

# ====== –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª ======
# init_db()
def poll_loop():
    if not INSTANCE_ID or not API_TOKEN:
        raise RuntimeError("GREENAPI_INSTANCE_ID / GREENAPI_API_TOKEN –Ω–µ –∑–∞–¥–∞–Ω—ã –≤ .env")
    print("[INFO] –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")

    while True:
        notif = _receive_one()
        if notif is None:
            time.sleep(1.0)
            continue

        receipt_id = notif.get("receiptId")
        body = notif.get("body") or {}

        try:
            twh = body.get("typeWebhook")
            if twh != "incomingMessageReceived":
                print(f"[DEBUG] skip typeWebhook={twh}")
                continue

            key = _msg_key(body)
            if key and key in PROCESSED:
                print(f"[DEBUG] dup {key}, skip")
                continue
            if key:
                PROCESSED.add(key)

            sender_data = body.get("senderData") or {}
            message_data = body.get("messageData") or {}
            user_id = str(sender_data.get("sender") or "").replace("+", "").strip()
            chat_id = sender_data.get("chatId")  # '79...@c.us'

            text = _extract_text(message_data)
            print(f"[IN ] user={user_id} type={message_data.get('typeMessage')} text={text!r}")

            if not user_id or text is None:
                # –Ω–µ —Ç–µ–∫—Å—Ç ‚Äî –Ω–µ –æ—Ç–≤–µ—á–∞–µ–º
                continue

            reply = handle_message(user_id, text)
            print(f"[OUT] user={user_id} reply={reply!r}")
            _send_text(chat_id or user_id, reply)

        except Exception as e:
            print(f"[ERROR] –û–±—Ä–∞–±–æ—Ç–∫–∞: {e}")
        finally:
            _delete_notification(receipt_id)

if __name__ == "__main__":
    poll_loop()

# –†–µ–∞–ª–∏–∑—É–µ—à—å REST —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –Ω–∞ –±–µ–∫–µ–Ω–¥–µ:

# POST /admins {phone} / DELETE /admins/{phone} / GET /admins/{phone}

# POST /clients/export

# –ú–µ–Ω—è–µ—à—å .env: BACKEND_ENABLED=1 –∏ (–ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏) –æ—Ç–∫–ª—é—á–∞–µ—à—å –ª–æ–∫–∞–ª—å–Ω—ã–π utils.export_excel.

# –í—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ —É–∂–µ –≥–æ—Ç–æ–≤–æ ‚Äî –±–æ—Ç –Ω–∞—á–Ω—ë—Ç —Ö–æ–¥–∏—Ç—å –≤ –±–µ–∫–µ–Ω–¥ –±–µ–∑ –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥.

# –ï—Å–ª–∏ –Ω—É–∂–Ω–æ ‚Äî –¥–æ–±–∞–≤–ª—é –∫–æ–º–∞–Ω–¥—É /send_otp <phone> –∏ 
# –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å OTP (–∏–∑ –ø—Ä–æ—à–ª–æ–π –≤–µ—Ç–∫–∏), –∞ —Ç–∞–∫–∂–µ –æ—Ç–ø—Ä–∞–≤–∫—É Excel-—Ñ–∞–π–ª–∞ –≤ —á–∞—Ç.