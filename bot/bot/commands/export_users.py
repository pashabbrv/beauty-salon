import os
import requests
from typing import Optional, Tuple, Any
from ..utils.excel_export import create_customers_excel, cleanup_temp_file

BACKEND_BASE_URL = os.getenv("BACKEND_BASE_URL")
AUTH_TOKEN       = os.getenv("BACKEND_TOKEN")

CUSTOMERS_PATH = "/api/customers/"


def create_customers_excel_file(customers):
    """
    –°–æ–∑–¥–∞–µ—Ç Excel —Ñ–∞–π–ª —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
    """
    if not customers:
        return None
    
    try:
        file_path = create_customers_excel(customers)
        return file_path
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Excel —Ñ–∞–π–ª–∞: {e}")
        return None


def format_customers_compact(users):
    """
    –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    """
    if not users:
        return "–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
    
    result = ["üë• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò:\n"]
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å—Ç–∞—Ç—É—Å—É (–∞–∫—Ç–∏–≤–Ω—ã–µ —Å–Ω–∞—á–∞–ª–∞) –∏ –¥–∞—Ç–µ
    sorted_users = sorted(users, key=lambda x: (x.get('status') != 'active', x.get('created_at', '')), reverse=True)
    
    for i, user in enumerate(sorted_users, 1):
        status_emoji = "‚úÖ" if user.get('status') == 'active' else "üö´"
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
        created_date = user.get('created_at', '').split('T')[0] if user.get('created_at') else 'N/A'
        
        user_text = (
            f"{i}. {status_emoji} {user.get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏')} "
            f"({user.get('phone', '–ë–µ–∑ —Ç–µ–ª–µ—Ñ–æ–Ω–∞')}) "
            f"- –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {created_date}"
        )
        result.append(user_text)
    
    return "\n".join(result)


def get_customers(
    timeout: int = 30
) -> Tuple[bool, Any]:
    """
    –î–µ–ª–∞–µ—Ç GET /api/customers/ —Å header Auth-Token.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (ok, data|error_text).
    ok=True  -> data = JSON/obj
    ok=False -> data = —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏ (str)
    """
    if not BACKEND_BASE_URL:
        return False, "BACKEND_BASE_URL –Ω–µ –∑–∞–¥–∞–Ω –≤ .env"
    if not AUTH_TOKEN:
        return False, "AUTH TOKEN –Ω–µ –∑–∞–¥–∞–Ω (.env BACKEND_AUTH_TOKEN –∏–ª–∏ BACKEND_TOKEN)"

    url = f"{BACKEND_BASE_URL}{CUSTOMERS_PATH}"

    headers = {"Auth-Token": AUTH_TOKEN}

    try:
        resp = requests.get(url, headers=headers, timeout=timeout)
        # 422 = Validation Error –ø–æ –¥–æ–∫–µ ‚Äî –≤–µ—Ä–Ω—ë–º —Ç–µ–∫—Å—Ç
        if resp.status_code != 200:
            return False, f"HTTP {resp.status_code}: {resp.text}"
        # –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º JSON
        ctype = resp.headers.get("Content-Type", "")
        if "application/json" in ctype.lower():
            return True, resp.json()
        # –µ—Å–ª–∏ –Ω–µ json ‚Äî –≤–µ—Ä–Ω—ë–º –∫–∞–∫ —Ç–µ–∫—Å—Ç
        return True, resp.text
    except requests.RequestException as e:
        return False, f"request error: {e}"
