import os
import requests
from typing import Optional, Tuple, Any
from ..utils.excel_export import create_appointments_excel, cleanup_temp_file

BACKEND_BASE_URL = os.getenv("BACKEND_BASE_URL")
AUTH_TOKEN       = os.getenv("BACKEND_TOKEN")

APPOINTMENTS_PATH = "/api/appointments/"


def create_appointments_excel_file(appointments):
    """
    –°–æ–∑–¥–∞–µ—Ç Excel —Ñ–∞–π–ª —Å –∑–∞–ø–∏—Å—è–º–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
    """
    if not appointments:
        return None
    
    try:
        file_path = create_appointments_excel(appointments)
        return file_path
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Excel —Ñ–∞–π–ª–∞: {e}")
        return None


def format_appointments_compact(appointments):
    """
    –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    """
    if not appointments:
        return "–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π"
    
    result = ["üìã –ó–ê–ü–ò–°–ò:\n"]
    
    for i, appointment in enumerate(appointments, 1):
        status = "‚úÖ" if appointment.get('confirmed') else "‚ùå"
        date = appointment['slot']['start'].split('T')[0]  # –¢–æ–ª—å–∫–æ –¥–∞—Ç–∞
        time = appointment['slot']['start'].split('T')[1][:5]  # –¢–æ–ª—å–∫–æ –≤—Ä–µ–º—è
        
        appointment_text = (
            f"{i}. {status} {date} {time} "
            f"- {appointment.get('name')} "
            f"({appointment['offering']['service']['name']}) "
            f"—É {appointment['offering']['master']['name']}"
        )
        result.append(appointment_text)
    
    return "\n".join(result)


def get_appointments(
    date: Optional[str] = None,          # "YYYY-MM-DD" –∏–ª–∏ None
    confirmed: Optional[bool] = None,    # True/False/None
    timeout: int = 30
) -> Tuple[bool, Any]:
    """
    –î–µ–ª–∞–µ—Ç GET /api/appointments/ —Å header Auth-Token.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (ok, data|error_text).
    ok=True  -> data = JSON/obj
    ok=False -> data = —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏ (str)
    """
    if not BACKEND_BASE_URL:
        return False, "BACKEND_BASE_URL –Ω–µ –∑–∞–¥–∞–Ω –≤ .env"
    if not AUTH_TOKEN:
        return False, "AUTH TOKEN –Ω–µ –∑–∞–¥–∞–Ω (.env BACKEND_AUTH_TOKEN –∏–ª–∏ BACKEND_TOKEN)"

    url = f"{BACKEND_BASE_URL}{APPOINTMENTS_PATH}"

    # –°–æ–±–∏—Ä–∞–µ–º query-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
    params = {}
    if date is not None and date != "":
        params["date"] = date
    if confirmed is not None:
        # –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –±–µ–∫–æ–≤ –ø–æ–Ω–∏–º–∞—é—Ç true/false –∫–∞–∫ –±—É–ª–µ–≤–æ, –Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ –æ—Ç–¥–∞—Ç—å —Å—Ç—Ä–æ–∫—É
        params["confirmed"] = "true" if confirmed else "false"

    headers = {"Auth-Token": AUTH_TOKEN}

    try:
        resp = requests.get(url, params=params, headers=headers, timeout=timeout)
        # 422 = Validation Error –ø–æ –¥–æ–∫–µ ‚Äî –≤–µ—Ä–Ω—ë–º —Ç–µ–∫—Å—Ç
        if resp.status_code != 200:
            return False, f"HTTP {resp.status_code}: {resp.text}"
        # –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º JSON
        ctype = resp.headers.get("Content-Type", "")
        if "application/json" in ctype.lower():
            return True, resp.json()
        # –µ—Å–ª–∏ –Ω–µ json ‚Äî –≤–µ—Ä–Ω—ë–º –∫–∞–∫ —Ç–µ–∫—Å—Ç
        return True, resp.text
    except requests.RequestException as e:
        return False, f"request error: {e}"